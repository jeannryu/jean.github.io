I"Ï|<p>I wanted to leave a note on frequently asked API calls based on GraphQL (for my personal convenience). They‚Äôre ready to use, you just have to change below fields to your own requirement:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;$zone_id&gt;</code> : To specify your domain. Find it in the dashboard under Overview - API - Zone ID.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;$datetime_geq&gt;</code> : Start timestamp formatted as rfc3339. Use UTC time.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;$datetime_leq&gt;</code> : End timestamp formatted as rfc3339. Use UTC time. When you request logs, you specify ‚ÄúI want logs happened from <code class="language-plaintext highlighter-rouge">&lt;$datetime_geq&gt;</code> to <code class="language-plaintext highlighter-rouge">&lt;$datetime_leq&gt;</code>‚Äù</li>
</ul>

<p>Sections with BETA flags mean they‚Äôre not part of official offerings yet. Keep in mind that general beta caveats apply - things can be added, changed, paused or withdrawed, also we would appreciate your constructive feedback!</p>

<p>I use GraphiQL as my client program, <a href="https://developers.cloudflare.com/analytics/graphql-api/">same as the official documentation</a>. If you‚Äôre a very beginner to GraphiQL, <a href="https://developers.cloudflare.com/analytics/graphql-api/getting-started/">read this article first to get started</a>. At GraphiQL, click on <code class="language-plaintext highlighter-rouge">Edit HTTP Headers</code> and make sure you already put below informations there.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">X-Auth-Email</code> : To specify who‚Äôs requesting. Use the email address you use to access the dashboard.</li>
  <li><code class="language-plaintext highlighter-rouge">X-Auth-Key</code> : To authenticate you. Find the key in the dashboard under My Profile - API Tokens - API Keys - Global API Key. Handle this like your password.</li>
</ul>

<p>Cloudflare GraphQL Endpoint: <code class="language-plaintext highlighter-rouge">https://api.cloudflare.com/client/v4/graphql</code></p>

<h1 class="no_toc" id="table-of-contents">Table of Contents</h1>

<ul id="markdown-toc">
  <li><a href="#firewall-events" id="markdown-toc-firewall-events">Firewall Events</a>    <ul>
      <li><a href="#analyse-a-request-in-detail" id="markdown-toc-analyse-a-request-in-detail">Analyse a request in detail</a></li>
      <li><a href="#inspect-botscore-given-to-a-request" id="markdown-toc-inspect-botscore-given-to-a-request">Inspect botScore given to a request</a></li>
      <li><a href="#status-codes-given-per-security-services-and-action" id="markdown-toc-status-codes-given-per-security-services-and-action">Status codes given per security services and action</a></li>
      <li><a href="#analyse-if-googlebot-can-reach-your-website-well" id="markdown-toc-analyse-if-googlebot-can-reach-your-website-well">Analyse if Googlebot can reach your website well</a></li>
      <li><a href="#retrieve-triggered-waf-rules-more-than-15-items" id="markdown-toc-retrieve-triggered-waf-rules-more-than-15-items">Retrieve Triggered WAF Rules (More than 15 items)</a></li>
    </ul>
  </li>
  <li><a href="#cache-analytics" id="markdown-toc-cache-analytics">Cache Analytics</a>    <ul>
      <li><a href="#analyse-a-request-in-detail-1" id="markdown-toc-analyse-a-request-in-detail-1">Analyse a request in detail</a></li>
      <li><a href="#top-20-items-that-are-uncached" id="markdown-toc-top-20-items-that-are-uncached">Top 20 items that are uncached</a></li>
      <li><a href="#top-20-clientip-top-20-useragents-in-specific-timeframe" id="markdown-toc-top-20-clientip-top-20-useragents-in-specific-timeframe">Top 20 clientIP, top 20 userAgents in specific timeframe</a></li>
    </ul>
  </li>
  <li><a href="#zone-analytics" id="markdown-toc-zone-analytics">Zone Analytics</a>    <ul>
      <li><a href="#number-of-requests-breakdown-by-https-for-a-month" id="markdown-toc-number-of-requests-breakdown-by-https-for-a-month">Number of requests breakdown by http(s) for a month</a></li>
    </ul>
  </li>
</ul>

<h1 id="firewall-events">Firewall Events</h1>

<p>As of 29 May:</p>
<ul>
  <li>Queryable Duration: Last 31 Days (2,678,400s)</li>
  <li>Sampled in Adaptive Bitrate (Up to 100%)</li>
</ul>

<h2 id="analyse-a-request-in-detail">Analyse a request in detail</h2>

<p>Let‚Äôs say you have a rayId of a request that looks like blocked by a Cloudflare security service and you‚Äôd like to know every detail incl 6W1H of it. Note that this query won‚Äôt give you a result if it did not trigger Cloudflare Firewall Event. If you don‚Äôt get a result in this query, <a href="/cloudflare/analytics/2020/05/28/frequently-asked-api-calls-en.html#pull-your-logs-for-a-specific-rayid">you may want to use Cloudflare Logpull to get detail of a particular rayId.</a></p>

<p>We need to have RayID to filter by it. Replace <code class="language-plaintext highlighter-rouge">&lt;$rayid&gt;</code> in this query with the actual RayID.</p>

<p><strong>Query:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">query</span> <span class="p">{</span>
  <span class="n">viewer</span><span class="p">{</span>
    <span class="n">zones</span><span class="p">(</span><span class="ss">filter: </span><span class="p">{</span> <span class="ss">zoneTag: </span><span class="vg">$zone_id</span><span class="p">})</span> <span class="p">{</span>
      <span class="n">firewallEventsAdaptiveGroups</span> <span class="p">(</span><span class="n">limit</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="ss">filter: </span><span class="vg">$filter</span><span class="p">,</span> <span class="ss">orderBy: </span><span class="p">[</span><span class="n">count_DESC</span><span class="p">])</span>
      <span class="p">{</span>
        <span class="n">dimensions</span><span class="p">{</span>
          <span class="n">action</span>
          <span class="n">source</span>
          <span class="n">datetime</span>
          <span class="n">clientIP</span>
          <span class="n">clientAsn</span>
          <span class="n">clientCountryName</span>
          <span class="n">edgeColoName</span>
          <span class="n">clientRequestHTTPProtocol</span>
          <span class="n">clientRequestHTTPHost</span>
          <span class="n">clientRequestPath</span>
          <span class="n">clientRequestQuery</span>
          <span class="n">clientRequestScheme</span>
          <span class="n">clientRequestHTTPMethodName</span>
          <span class="n">clientRefererHost</span>
          <span class="n">clientRefererPath</span>
          <span class="n">clientRefererQuery</span>
          <span class="n">clientRefererScheme</span>
          <span class="n">edgeResponseStatus</span>
          <span class="n">clientASNDescription</span>
          <span class="n">userAgent</span>
          <span class="n">kind</span>
          <span class="n">matchIndex</span>
          <span class="n">originResponseStatus</span>
          <span class="n">originatorRayName</span>
          <span class="n">ruleId</span>
        <span class="p">}</span>
      <span class="p">}</span> 
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Query Variables:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">{</span>
  <span class="s2">"zone_id"</span> <span class="p">:</span> <span class="s2">"&lt;$zone_id&gt;"</span><span class="p">,</span>
  <span class="s2">"filter"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"datetime_geq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_geq&gt;"</span><span class="p">,</span>
    <span class="s2">"datetime_leq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_leq&gt;"</span><span class="p">,</span>
    <span class="s2">"rayName"</span> <span class="p">:</span> <span class="s2">"&lt;$rayid&gt;"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="inspect-botscore-given-to-a-request">Inspect botScore given to a request</h2>

<p>As of 2020-05-31, graphql firewall events doesn‚Äôt provide botScore. Follow the self-documented schema to have up-to-date information. However, <a href="/cloudflare/analytics/2020/05/28/frequently-asked-api-calls-en.html#pull-your-logs-for-a-specific-rayid">this query will give you botScore and scoring source tied to a given request.</a> Available in Logpush as well. Bring your rayId handy and get useful information including (but not limited to) below:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="s2">"BotScore"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="s2">"BotScoreSrc"</span><span class="p">:</span> <span class="s2">"Machine Learning"</span><span class="p">,</span>
  <span class="s2">"EdgeResponseStatus"</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
  <span class="s2">"OriginResponseStatus"</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
  <span class="s2">"FirewallMatchesActions"</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">"simulate"</span>
  <span class="p">],</span>
  <span class="s2">"FirewallMatchesRuleIDs"</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">"91576b79149c46678682d91daf9ab61f"</span>
  <span class="p">],</span>
  <span class="s2">"FirewallMatchesSources"</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">"firewallRules"</span>
  <span class="p">],</span>  </code></pre></figure>

<p><strong>Applicable only for zones with Bot Management activated.</strong></p>

<p><a href="/cloudflare/botmanagement/2020/05/31/are-you-a-bot.html">How can botScore help my life? Learn more here</a></p>

<h2 id="status-codes-given-per-security-services-and-action">Status codes given per security services and action</h2>

<p>As of 2020-05-29, Firewall Events dashboard gives lots of detailed information but you don‚Äôt see status code information that is given to the blocked request. This query will give you status codes information breakdown when the action given was <code class="language-plaintext highlighter-rouge">drop</code>, <code class="language-plaintext highlighter-rouge">challenge</code> or <code class="language-plaintext highlighter-rouge">jschallenge</code>.</p>

<p><strong>Query:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">query</span> <span class="p">{</span>
  <span class="n">viewer</span><span class="p">{</span>
    <span class="n">zones</span><span class="p">(</span><span class="ss">filter: </span><span class="p">{</span> <span class="ss">zoneTag: </span><span class="vg">$zone_id</span><span class="p">})</span> <span class="p">{</span>
      <span class="n">firewallEventsAdaptiveGroups</span> <span class="p">(</span><span class="n">limit</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="ss">filter: </span><span class="vg">$filter</span><span class="p">,</span> <span class="ss">orderBy: </span><span class="p">[</span><span class="n">count_DESC</span><span class="p">])</span>
      <span class="p">{</span>
        <span class="n">count</span>
        <span class="n">dimensions</span><span class="p">{</span>
          <span class="n">action</span>
          <span class="n">source</span>
          <span class="n">kind</span>
          <span class="n">edgeResponseStatus</span>
          <span class="n">originResponseStatus</span>
        <span class="p">}</span>
      <span class="p">}</span> 
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Query Variables:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">{</span>
  <span class="s2">"zone_id"</span> <span class="p">:</span> <span class="s2">"&lt;$zone_id&gt;"</span><span class="p">,</span>
  <span class="s2">"filter"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"datetime_geq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_geq&gt;"</span><span class="p">,</span>
    <span class="s2">"datetime_leq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_leq&gt;"</span><span class="p">,</span>
    <span class="s2">"action_in"</span> <span class="p">:</span> <span class="p">[</span><span class="s2">"drop"</span><span class="p">,</span><span class="s2">"challenge"</span><span class="p">,</span><span class="s2">"jschallenge"</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="analyse-if-googlebot-can-reach-your-website-well">Analyse if Googlebot can reach your website well</h2>

<p>It is extremely important to make sure search engine crawlers are able to access fine and crawl contents in your website, without being blocked by Cloudflare security products or anything else. Hence, please follow <a href="https://developers.cloudflare.com/firewall/known-issues-and-faq/#how-does-firewall-rules-handle-traffic-from-known-bots">this instruction to create a Firewall Rule that allows known good bots</a> first. Once you‚Äôve done this, we will use a below GraphQL query to analyse if Googlebot can reach your website well, from what locations, etc.</p>

<p><strong>Query:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">query</span> <span class="p">{</span>
  <span class="n">viewer</span><span class="p">{</span>
    <span class="n">zones</span><span class="p">(</span><span class="ss">filter: </span><span class="p">{</span> <span class="ss">zoneTag: </span><span class="vg">$zone_id</span><span class="p">})</span> <span class="p">{</span>
      <span class="n">firewallEventsAdaptiveGroups</span> <span class="p">(</span><span class="n">limit</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="ss">filter: </span><span class="vg">$filter</span><span class="p">,</span> <span class="ss">orderBy: </span><span class="p">[</span><span class="n">count_DESC</span><span class="p">])</span>
      <span class="p">{</span>
        <span class="n">count</span>
        <span class="n">dimensions</span><span class="p">{</span>
          <span class="n">action</span>
          <span class="n">source</span>
          <span class="n">edgeResponseStatus</span>
          <span class="n">originResponseStatus</span>
          <span class="n">edgeColoName</span>
          <span class="n">ruleId</span>
          <span class="n">clientAsn</span>
          <span class="n">userAgent</span>
        <span class="p">}</span>
      <span class="p">}</span> 
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Query Variables:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="p">{</span>
  <span class="s2">"zone_id"</span> <span class="p">:</span> <span class="s2">"&lt;$zone_id&gt;"</span><span class="p">,</span>
  <span class="s2">"filter"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"datetime_geq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_geq&gt;"</span><span class="p">,</span>
      <span class="s2">"datetime_leq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_leq&gt;"</span><span class="p">,</span>
      <span class="s2">"clientAsn"</span> <span class="p">:</span> <span class="s2">"15169"</span><span class="p">,</span>
      <span class="s2">"userAgent_like"</span> <span class="p">:</span> <span class="s2">"%Googlebot%"</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<p>Most of the query result should contain <code class="language-plaintext highlighter-rouge">"action": "allow"</code>. Most of the result should contain <code class="language-plaintext highlighter-rouge">"edgeResponseStatus": 200</code> as well. For your information, <code class="language-plaintext highlighter-rouge">404</code> is fine. But if you see Googlebot requests are somehow being blocked, and if you see <code class="language-plaintext highlighter-rouge">403</code> or <code class="language-plaintext highlighter-rouge">5xx</code> in HTTP status codes‚Ä¶ recheck your security rules and the origin server.</p>

<p>If you don‚Äôt see anything from the result, that‚Äôs not good either as it means you aren‚Äôt getting googlebot requests. (a) check if you created firewall rules correctly, and (b) check if you correctly registered your website at your Google Search Console.</p>

<h2 id="retrieve-triggered-waf-rules-more-than-15-items">Retrieve Triggered WAF Rules (More than 15 items)</h2>

<p>At Firewall Events dashboard you can get lists of WAF rules triggered up to 15 items (as of today 2020-06-29), but not more than that. You can of course try to narrow time window but occasionally, you just want to have full list of triggered WAF ruleIds and their actions, e.g. up to 100. GraphQL Analytics API can help you to retrieve that. You can feel free to change the filter to retrieve another items like clientIPs, userAgents, etc.</p>

<p><strong>Query:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">query</span> <span class="p">{</span>
  <span class="n">viewer</span><span class="p">{</span>
    <span class="n">zones</span><span class="p">(</span><span class="ss">filter: </span><span class="p">{</span> <span class="ss">zoneTag: </span><span class="vg">$zone_id</span><span class="p">})</span> <span class="p">{</span>
      <span class="n">firewallEventsAdaptiveGroups</span> <span class="p">(</span><span class="n">limit</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span> <span class="ss">filter: </span><span class="vg">$filter</span><span class="p">,</span> <span class="ss">orderBy: </span><span class="p">[</span><span class="n">count_DESC</span><span class="p">])</span>
      <span class="p">{</span>
        <span class="n">count</span>
        <span class="n">dimensions</span><span class="p">{</span>
          <span class="n">ruleId</span>
          <span class="n">action</span>
        <span class="p">}</span>
      <span class="p">}</span>
     <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Query Variables:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="p">{</span>
    <span class="s2">"zone_id"</span> <span class="p">:</span> <span class="s2">"&lt;$zone_id&gt;"</span><span class="p">,</span>
    <span class="s2">"filter"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"datetime_geq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_geq&gt;"</span><span class="p">,</span>
      <span class="s2">"datetime_leq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_leq&gt;"</span><span class="p">,</span>
      <span class="s2">"source"</span><span class="p">:</span> <span class="s2">"waf"</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<h1 id="cache-analytics">Cache Analytics</h1>

<p>As of 2020-06-29:</p>
<ul>
  <li>Queryable Duration: Last 22 Days (1,900,800s)</li>
  <li>Sampled in Adaptive Bitrate (Up to 10%)</li>
</ul>

<h2 id="analyse-a-request-in-detail-1">Analyse a request in detail</h2>

<p>Unfortunately, as of 29 May 2020, you can‚Äôt do this with Cache Analytics because it uses up to 1% adaptive bitrate sampling. Hence, a desired way of using this graphql dataset is to analyse caching tendency. If you‚Äôd like to analyse a particular request with rayId in caching context, please use <a href="/cloudflare/analytics/2020/05/28/frequently-asked-api-calls-en.html#pull-your-logs-for-a-specific-rayid">Cloudflare Logpull.</a></p>

<p>Still, I‚Äôm sharing this query for you to see how the response fields look like in Cache Analytics dataset. This will pick a random request that doesn‚Äôt have  <code class="language-plaintext highlighter-rouge">CacheStatus</code> as <code class="language-plaintext highlighter-rouge">"hit"</code> and returns a detail of it.</p>

<p><strong>Query:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">query</span> <span class="p">{</span>
  <span class="n">viewer</span><span class="p">{</span>
    <span class="n">zones</span><span class="p">(</span><span class="ss">filter: </span><span class="p">{</span> <span class="ss">zoneTag: </span><span class="vg">$zone_id</span><span class="p">})</span> <span class="p">{</span>
      <span class="n">httpRequestsAdaptiveGroups</span> <span class="p">(</span><span class="n">limit</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="ss">filter: </span><span class="vg">$filter</span><span class="p">,</span> <span class="ss">orderBy: </span><span class="p">[</span><span class="n">count_DESC</span><span class="p">])</span>
      <span class="p">{</span>
        <span class="n">dimensions</span><span class="p">{</span>
          <span class="n">cacheStatus</span>
          <span class="n">clientAsn</span>
          <span class="n">clientCountryName</span>
          <span class="n">clientDeviceType</span>
          <span class="n">clientIP</span>
          <span class="n">clientRequestHTTPHost</span>
          <span class="n">clientRequestHTTPMethodName</span>
          <span class="n">clientRequestPath</span>
          <span class="n">clientRequestQuery</span>
          <span class="n">clientRequestReferer</span>
          <span class="n">coloCode</span>
          <span class="n">datetime</span>
          <span class="n">edgeResponseContentTypeName</span>
          <span class="n">edgeResponseStatus</span>
          <span class="n">edgeWorkerSubrequestParentRayId</span>
          <span class="n">requestSource</span>
          <span class="n">sampleInterval</span>
          <span class="n">upperTierColoName</span>
          <span class="n">userAgent</span>
          <span class="n">xRequestedWith</span>
        <span class="p">}</span>
      <span class="p">}</span> 
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Query Variables:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="p">{</span>
    <span class="s2">"zone_id"</span> <span class="p">:</span> <span class="s2">"&lt;$zone_id&gt;"</span><span class="p">,</span>
    <span class="s2">"filter"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"datetime_geq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_geq&gt;"</span><span class="p">,</span>
      <span class="s2">"datetime_leq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_leq&gt;"</span><span class="p">,</span>
      <span class="s2">"cacheStatus_neq"</span> <span class="p">:</span> <span class="s2">"hit"</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<h2 id="top-20-items-that-are-uncached">Top 20 items that are uncached</h2>

<p>Would you like to increase your cache hit rate to 99% but you are not sure why many of contents remain uncached? Use this query to pull top 20 uncached items in your zone and get explanation on why they were uncached. As of 29 May 2020, this query gives more granularity than Cache Analytics dashboard as it shows request query string.</p>

<p><strong>Query:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">query</span> <span class="p">{</span>
  <span class="n">viewer</span><span class="p">{</span>
    <span class="n">zones</span><span class="p">(</span><span class="ss">filter: </span><span class="p">{</span> <span class="ss">zoneTag: </span><span class="vg">$zone_id</span><span class="p">})</span> <span class="p">{</span>
      <span class="n">httpRequestsAdaptiveGroups</span> <span class="p">(</span><span class="n">limit</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="ss">filter: </span><span class="vg">$filter</span><span class="p">,</span> <span class="ss">orderBy: </span><span class="p">[</span><span class="n">count_DESC</span><span class="p">])</span>
      <span class="p">{</span>
        <span class="n">count</span>
        <span class="n">dimensions</span><span class="p">{</span>
          <span class="n">cacheStatus</span>
          <span class="n">clientRequestHTTPHost</span>
          <span class="n">clientRequestPath</span>
          <span class="n">clientRequestQuery</span>
          <span class="n">edgeResponseContentTypeName</span>
        <span class="p">}</span>
      <span class="p">}</span> 
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Query Variables:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">   <span class="p">{</span>
    <span class="s2">"zone_id"</span> <span class="p">:</span> <span class="s2">"&lt;$zone_id&gt;"</span><span class="p">,</span>
    <span class="s2">"filter"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"datetime_geq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_geq&gt;"</span><span class="p">,</span>
      <span class="s2">"datetime_leq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_leq&gt;"</span><span class="p">,</span>
      <span class="s2">"cacheStatus_in"</span> <span class="p">:</span> <span class="p">[</span><span class="s2">"dynamic"</span><span class="p">,</span><span class="s2">"none"</span><span class="p">,</span><span class="s2">"miss"</span><span class="p">,</span><span class="s2">"expired"</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<h2 id="top-20-clientip-top-20-useragents-in-specific-timeframe">Top 20 clientIP, top 20 userAgents in specific timeframe</h2>

<p>If you would like to see top 20 clientIP or userAgent etc, in specific timeframe, you can leverage Cache Analytics dataset with few caveats apply.</p>

<ul>
  <li>As of 2020-06-02, maximum queryable window per query is up to 72 hours(259200s). Hence this cannot serve a requirement such as ‚ÄúI need top 20 client IP info from 1 June to 30 June.‚Äù</li>
  <li>As of 2020-06-02, Cache Analytics leverages sampled data up to 1%. Keep this in mind when utilizing this data.</li>
</ul>

<p>Should you need long-term information or you need 100% of data, <a href="/cloudflare/analytics/2020/05/28/frequently-asked-api-calls-en.html#top-20-clientip-top-20-useragents-in-specific-timeframe">please leverage Enterprise Logs instead.</a></p>

<p><strong>Query:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">query</span> <span class="p">{</span>
  <span class="n">viewer</span><span class="p">{</span>
    <span class="n">zones</span><span class="p">(</span><span class="ss">filter: </span><span class="p">{</span> <span class="ss">zoneTag: </span><span class="vg">$zone_id</span><span class="p">})</span> <span class="p">{</span>
      <span class="n">httpRequestsAdaptiveGroups</span> <span class="p">(</span><span class="n">limit</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="ss">filter: </span><span class="vg">$filter</span><span class="p">,</span> <span class="ss">orderBy: </span><span class="p">[</span><span class="n">count_DESC</span><span class="p">])</span>
      <span class="p">{</span>
        <span class="n">count</span>
        <span class="n">dimensions</span><span class="p">{</span>
         <span class="n">clientIP</span>
        <span class="p">}</span>
      <span class="p">}</span> 
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Query Variables:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">   <span class="p">{</span>
    <span class="s2">"zone_id"</span> <span class="p">:</span> <span class="s2">"&lt;$zone_id&gt;"</span><span class="p">,</span>
    <span class="s2">"filter"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"datetime_geq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_geq&gt;"</span><span class="p">,</span>
      <span class="s2">"datetime_leq"</span> <span class="p">:</span> <span class="s2">"&lt;$datetime_leq&gt;"</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<p>To query userAgent information, please replace <code class="language-plaintext highlighter-rouge">clientIP</code> to <code class="language-plaintext highlighter-rouge">userAgent</code> in the query.</p>

<h1 id="zone-analytics">Zone Analytics</h1>

<p>Zone Analytics is a traffic overview information which you can find in the Analytics - Traffic app from Cloudflare dashboard. You can query to httpRequest1xGroups (httpRequest1mGroups, httpRequest1hGroups, httpRequest1dGroups) to retrieve information about Zone Analytics.</p>

<h2 id="number-of-requests-breakdown-by-https-for-a-month">Number of requests breakdown by http(s) for a month</h2>

<p>If you want to count number of http requests in comparison to https requests made to your domain, you can leverage daily rollup data of the Zone Analytics dataset, which is <code class="language-plaintext highlighter-rouge">httpRequest1dGroups</code>.</p>

<p><strong>Query:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">query</span> <span class="p">{</span>
  <span class="n">viewer</span><span class="p">{</span>
    <span class="n">zones</span><span class="p">(</span><span class="ss">filter: </span><span class="p">{</span> <span class="ss">zoneTag: </span><span class="vg">$zoneid</span><span class="p">})</span> <span class="p">{</span>
      <span class="n">httpRequests1dGroups</span> <span class="p">(</span><span class="n">limit</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span> <span class="ss">filter: </span><span class="vg">$filter</span><span class="p">,</span> <span class="ss">orderBy: </span><span class="p">[</span><span class="n">sum_requests_DESC</span><span class="p">])</span>
      <span class="p">{</span>
        <span class="n">sum</span>
        <span class="p">{</span>
          <span class="n">requests</span>
          <span class="n">encryptedRequests</span>
        <span class="p">}</span>
      <span class="p">}</span> 
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Query Variables:</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">{</span>
  <span class="s2">"zoneid"</span> <span class="p">:</span> <span class="s2">"&lt;$zone_id&gt;"</span><span class="p">,</span>
  <span class="s2">"filter"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"date_geq"</span> <span class="p">:</span> <span class="s2">"2020-05-01"</span><span class="p">,</span>
    <span class="s2">"date_leq"</span> <span class="p">:</span> <span class="s2">"2020-05-31"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
:ET